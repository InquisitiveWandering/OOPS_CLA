/* Demonstrate how to use private, protected, and public access modifiers in C++ to implement data hiding.*/

#include <iostream>
using namespace std;

class Base {
private:
    int privateData;     // only inside Base

protected:
    int protectedData;   // inside Base + derived

public:
    int publicData;      // anywhere

    void setData(int a, int b, int c) {
        privateData = a;
        protectedData = b;
        publicData = c;
    }

    void showBase() {
        cout << "Private: " << privateData << endl;
        cout << "Protected: " << protectedData << endl;
        cout << "Public: " << publicData << endl;
    }
};

class Derived : public Base {
public:
    void showDerived() {
        // privateData ❌ not accessible
        cout << "Protected (from Derived): " << protectedData << endl;
        cout << "Public (from Derived): " << publicData << endl;
    }
};

int main() {
    Base b;
    b.setData(10, 20, 30);
    b.showBase();

    Derived d;
    d.setData(100, 200, 300);  // uses Base function
    d.showDerived();

    d.publicData = 500;        // ✅ allowed (public)
    // d.protectedData = 400;  // ❌ not allowed outside
    d.showDerived();

    return 0;
}
